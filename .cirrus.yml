env:
  CIRRUS_CLONE_DEPTH: "1"
  CIRRUS_SHELL: bash

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  BURGR_URL: VAULT[development/kv/data/burgr data.url]
  BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
  BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]
  SONAR_HOST_URL: VAULT[development/kv/data/next data.url]
  SONAR_TOKEN: VAULT[development/kv/data/next data.token]

auto_cancellation: $CIRRUS_BRANCH != 'master'

only_if_with_nightly: &ONLY_IF
  skip: "changesIncludeOnly('docs/*', '**/README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == ""
    && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

only_if_except_nightly: &ONLY_IF_EXCEPT_NIGHTLY
  skip: "changesIncludeOnly('docs/*', '**/README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BUILD_SOURCE != "cron"
    && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

only_pr_and_maintained_branches: &ONLY_PR_AND_MAINTAINED_BRANCHES
  skip: "changesIncludeOnly('docs/*', '**/README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BUILD_SOURCE != "cron"
    && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

only_main_branches: &ONLY_MAIN_BRANCHES
  skip: "changesIncludeOnly('docs/*', '**/README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*")

eks_container: &CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-m3.9-latest
  region: eu-central-1
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  namespace: default

eks_builder_container: &BUILDER_CONTAINER_DEFINITION
  <<: *CONTAINER_DEFINITION
  dockerfile: .cirrus/Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t3.small
  builder_subnet_id: ${CIRRUS_AWS_SUBNET}

maven_cache: &SETUP_MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script:
      - /usr/bin/find . -name pom.xml -not -path './its/*' -exec cat {} \+
      - cat target-platforms/build.target target-platforms/commons.target

maven_cache_qa: &SETUP_MAVEN_CACHE_QA
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script:
      - echo $TARGET_PLATFORM
      - /usr/bin/find . -name pom.xml -not -path './its/*' -exec cat {} \+
      - cat target-platforms/commons.target its/target-platforms/*.target

build_task:
  # name: "Build and stage to repox"
  <<: *ONLY_IF
  eks_container:
    <<: *BUILDER_CONTAINER_DEFINITION
    cpu: 4
    memory: 2G
  env:
    ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
    ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    DEPLOY_PULL_REQUEST: true
    CODESIGNING_JKS_FILE: VAULT[development/team/sonarlint/kv/data/codesigning/2021-2023 data.file]
    CODESIGNING_JKS_PATH: ${CIRRUS_WORKING_DIR}/SonarSource-2021-2023.jks
    CODESIGNING_JKS_PASSWORD: VAULT[development/team/sonarlint/kv/data/codesigning/2021-2023 data.password]
  codesigning_file:
    path: ${CODESIGNING_JKS_PATH}.b64
    variable_name: CODESIGNING_JKS_FILE
  <<: *SETUP_MAVEN_CACHE
  build_script: |
    source cirrus-env BUILD-PRIVATE
    base64 --decode "${CODESIGNING_JKS_PATH}.b64" > "${CODESIGNING_JKS_PATH}"
    .cirrus/regular_mvn_build_deploy_analyze -Dmaven.test.skip=true -Dsonar.skip=true cyclonedx:makeAggregateBom
  cleanup_before_cache_script: cleanup_maven_repository

validate_task:
  # name: "Run unit tests on Linux"
  depends_on:
    - build
  <<: *ONLY_IF_EXCEPT_NIGHTLY
  eks_container:
    <<: *BUILDER_CONTAINER_DEFINITION
    cpu: 4
    memory: 2G
  env:
    DEPLOY_PULL_REQUEST: false
    DISPLAY: :10
  <<: *SETUP_MAVEN_CACHE
  xvfb_background_script: |
    /etc/init.d/xvfb start
  qa_script: |
    metacity --sm-disable --replace &
    sleep 10 # give metacity some time to start
    source cirrus-env QA
    mvn -B -e -V verify -P-deploy-sonarsource,-release,-sign
    /etc/init.d/xvfb stop
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    xvfb_log_artifacts:
      path: "${CIRRUS_WORKING_DIR}/Xvfb.out"
    junit_artifacts:
      path: '**/target/surefire-reports/TEST-*.xml'
      format: junit

qa_task:
  #  name: "Run ITs"
  depends_on:
    - build
  <<: *ONLY_IF_EXCEPT_NIGHTLY
  eks_container:
    <<: *BUILDER_CONTAINER_DEFINITION
    cpu: 4
    memory: 12G
  env:
    ARTIFACTORY_API_KEY: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    SONARCLOUD_IT_PASSWORD: VAULT[development/team/sonarlint/kv/data/sonarcloud-it data.password]
    DISPLAY: :10
    MAVEN_OPTS: -Xmx3072m
  matrix:
    - env:
        TARGET_PLATFORM: 'oldest'
        SQ_VERSION: 'LATEST_RELEASE[8.9]'
        QA_CATEGORY: 'Oldest'
    - env:
        TARGET_PLATFORM: 'latest'
        SQ_VERSION: 'LATEST_RELEASE[9.9]'
        QA_CATEGORY: 'Latest'
    - env:
        TARGET_PLATFORM: 'ibuilds'
        SQ_VERSION: 'DEV'
        QA_CATEGORY: 'IBuilds'
  <<: *SETUP_MAVEN_CACHE_QA
  download_staged_update_site_script: |
    set -euo pipefail
    source cirrus-env QA
    source .cirrus/set_maven_build_version $BUILD_NUMBER
    mvn -B -e -V dependency:unpack -Dtycho.mode=maven -Dartifact=org.sonarsource.sonarlint.eclipse:org.sonarlint.eclipse.site:${PROJECT_VERSION}:zip -DoutputDirectory=${CIRRUS_WORKING_DIR}/staged-repository
  prepare_background_script: |
    set -euo pipefail
    /etc/init.d/xvfb start
    metacity --sm-disable --replace &
    sleep 10 # give metacity some time to start
    echo 'Recording tests on video'
    ffmpeg -loglevel warning -f x11grab -video_size 1920x1080 -i ${DISPLAY} -codec:v libx264 -r 12 ${CIRRUS_WORKING_DIR}/recording_${TARGET_PLATFORM}.mp4
  run_its_script: |
    echo "Run Maven ITs for Eclipse ${TARGET_PLATFORM} and Server ${SQ_VERSION}"
    mvn -B -e -V org.jacoco:jacoco-maven-plugin:prepare-agent verify -f its/pom.xml -Pcoverage \
      -Dtarget.platform=${TARGET_PLATFORM} -Dtycho.localArtifacts=ignore -Dsonarlint-eclipse.p2.url="file://${CIRRUS_WORKING_DIR}/staged-repository" -Dsonar.runtimeVersion=${SQ_VERSION} \
      -Djacoco.append=true -Djacoco.destFile=${CIRRUS_WORKING_DIR}/it-coverage.exec
    mv it-coverage.exec it-coverage-${TARGET_PLATFORM}.exec
  stop_recording_script: |
    pkill -SIGINT -f ffmpeg
    while pgrep ffmpeg >/dev/null; do sleep 1; done
    /etc/init.d/xvfb stop
  cleanup_before_cache_script: cleanup_maven_repository
  always:
    test_recording_artifacts:
      path: "${CIRRUS_WORKING_DIR}/recording_${TARGET_PLATFORM}.mp4"
    log_artifacts:
      path: "its/build/idea-sandbox/system/log"
    jacoco_artifacts:
      path: "${CIRRUS_WORKING_DIR}/it-coverage*.exec"
  on_failure:
    xvfb_log_artifacts:
      path: "${CIRRUS_WORKING_DIR}/Xvfb.out"
    reports_artifacts:
      path: "**/reports/**/*"
    junit_artifacts:
      paths:
      - "**/test-results/**/*.xml"
      - "**/target/surefire-reports/TEST-*.xml"
      format: junit

sonarqube_task:
  # name: "Run SonarQube analysis"
  depends_on:
    - qa
  <<: *ONLY_IF_EXCEPT_NIGHTLY
  eks_container:
    <<: *BUILDER_CONTAINER_DEFINITION
    cpu: 4
    memory: 2G
  env:
    DEPLOY_PULL_REQUEST: false
    DISPLAY: :10
  <<: *SETUP_MAVEN_CACHE
  prepare_background_script: |
    set -euo pipefail
    /etc/init.d/xvfb start
    metacity --sm-disable --replace &
    sleep 10 # give metacity some time to start
  sonarqube_script: |
    set -euo pipefail
    mkdir ${CIRRUS_WORKING_DIR}/org.sonarlint.eclipse.core.tests/target/
    curl --no-progress-meter https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/jacoco.zip -o jacoco.zip
    unzip jacoco.zip -d ${CIRRUS_WORKING_DIR}/org.sonarlint.eclipse.core.tests/target/
    source cirrus-env QA
    .cirrus/regular_mvn_build_deploy_analyze \
      -P-deploy-sonarsource,-release,-sign -Dmaven.install.skip=true -Dmaven.deploy.skip=true \
      -Pcoverage -Djacoco.append=true -Dsonar.coverage.jacoco.xmlReportPaths=${CIRRUS_WORKING_DIR}/org.sonarlint.eclipse.core.tests/target/site/jacoco-aggregate/jacoco.xml
    /etc/init.d/xvfb stop
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    xvfb_log_artifacts:
      path: "${CIRRUS_WORKING_DIR}/Xvfb.out"

mend_scan_task:
  # Run Mend analysis
  depends_on:
    - build
  <<: *ONLY_MAIN_BRANCHES
  eks_container:
    <<: *BUILDER_CONTAINER_DEFINITION
    cpu: 4
    memory: 8G
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  <<: *SETUP_MAVEN_CACHE
  whitesource_script:
    - source cirrus-env QA
    - source .cirrus/set_maven_build_version $BUILD_NUMBER
    - mvn -B -e -V clean install -DskipTests
    - source ws_scan.sh
  cleanup_before_cache_script: cleanup_maven_repository
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"

promote_task:
  depends_on:
    - validate
    - qa
    - sonarqube
  <<: *ONLY_PR_AND_MAINTAINED_BRANCHES
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 1G
  env:
    GCF_ACCESS_TOKEN: VAULT[development/kv/data/promote data.token]
    PROMOTE_URL: VAULT[development/kv/data/promote data.url]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
    # artifacts which will have downloadable links in burgr
    ARTIFACTS: org.sonarsource.sonarlint.eclipse:org.sonarlint.eclipse.site:zip,org.sonarsource.sonarlint.eclipse:sonarlint-eclipse-parent:json:cyclonedx
  <<: *SETUP_MAVEN_CACHE
  promote_script: |
    source cirrus-env PROMOTE
    .cirrus/cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository

dogfood_task:
  #  name: "Update internal dogfooding p2"
  #  alias: "update_dogfood_repo"
  depends_on:
    - promote
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 1G
  env:
    ARTIFACTORY_API_USER: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter
    ARTIFACTORY_API_KEY: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
  dogfood_script: |
    source cirrus-env QA
    source .cirrus/set_maven_build_version $BUILD_NUMBER
    jfrog rt cp \
      sonarsource-public-builds/org/sonarsource/sonarlint/eclipse/org.sonarlint.eclipse.site/${PROJECT_VERSION}/org.sonarlint.eclipse.site-${PROJECT_VERSION}.zip \
      sonarlint-eclipse-dogfood/org.sonarlint.eclipse.site-dogfood.zip \
      --url "${ARTIFACTORY_URL}" --access-token "${ARTIFACTORY_API_KEY}" --build-name "$CIRRUS_REPO_NAME" --build-number "$BUILD_NUMBER"
