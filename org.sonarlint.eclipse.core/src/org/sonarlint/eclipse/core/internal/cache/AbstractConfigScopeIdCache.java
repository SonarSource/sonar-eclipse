/*
 * SonarLint for Eclipse
 * Copyright (C) 2015-2025 SonarSource SA
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonarlint.eclipse.core.internal.cache;

import java.util.concurrent.ConcurrentHashMap;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.annotation.Nullable;
import org.sonarlint.eclipse.core.internal.jobs.AbstractSonarJob;

/**
 *  This is the base for all caches that are linked to a configuration scope id. This can be both IProject and
 *  ISonarLintProject as "configScopeId" is generated by `IProject#getLocationURI().toString()`. The actual cache
 *  implementation will provide the duration for how long the cache is valid before the entry is removed
 *
 *  @param <T> values stored per configuration scope id
 */
public abstract class AbstractConfigScopeIdCache<T> {
  private final ConcurrentHashMap<String, T> cache = new ConcurrentHashMap<>();

  @Nullable
  public synchronized T getEntry(String configScopeId) {
    if (!cache.containsKey(configScopeId)) {
      return null;
    }
    return cache.get(configScopeId);
  }

  public synchronized void putEntry(String configScopeId, T entry) {
    cache.put(configScopeId, entry);
    new DeleteCacheEntryJob<T>(this, configScopeId)
      .schedule(getCacheDuration());
  }

  public synchronized void removeEntry(String configScopeId) {
    cache.remove(configScopeId);
  }

  /** Should be a meaningful period based on the actual cache implementation */
  protected abstract long getCacheDuration();

  private static class DeleteCacheEntryJob<T> extends AbstractSonarJob {
    private final AbstractConfigScopeIdCache<T> cache;
    private final String configScopeId;

    public DeleteCacheEntryJob(AbstractConfigScopeIdCache<T> cache, String configScopeId) {
      super("Delete cache entry for: " + configScopeId);
      this.cache = cache;
      this.configScopeId = configScopeId;
    }

    @Override
    protected IStatus doRun(IProgressMonitor monitor) throws CoreException {
      cache.removeEntry(configScopeId);
      return Status.OK_STATUS;
    }
  }
}
