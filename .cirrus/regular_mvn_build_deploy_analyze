#!/bin/bash
# Forked from https://github.com/SonarSource/re-ci-images/tree/master/docker/bin for using custom set_maven_build_version
# Regular way to build a SonarSource Maven project.
# Requires the environment variables:
# - SONAR_HOST_URL: URL of SonarQube server
# - SONAR_TOKEN: access token to send analysis reports to $SONAR_HOST_URL
# - ARTIFACTORY_URL: URL to Artifactory repository
# - ARTIFACTORY_DEPLOY_REPO: name of deployment repository
# - ARTIFACTORY_DEPLOY_USERNAME: login to deploy to $ARTIFACTORY_DEPLOY_REPO
# - ARTIFACTORY_DEPLOY_PASSWORD: password to deploy to $ARTIFACTORY_DEPLOY_REPO
# Artifact signing using https://www.simplify4u.org/sign-maven-plugin/. It is required for public- and encouraged for private builds
# - SIGN_KEY: OpenPGP key for signing the resulting artifact. Must contain private key content and not file path for key
# - PGP_PASSPHRASE: passphrase of signing key, can be encrypted
# shellcheck source=/dev/null

set -euo pipefail

# Fetch all commit history so that SonarQube has exact blame information
# for issue auto-assignment
# This command can fail with "fatal: --unshallow on a complete repository does not make sense"
# if there are not enough commits in the Git repository
# For this reason errors are ignored with "|| true"
git fetch --unshallow || true

# fetch references from github for PR analysis
if [ -n "${GITHUB_BASE_BRANCH}" ]; then
	git fetch origin "${GITHUB_BASE_BRANCH}"
fi

if [ -z "$PIPELINE_ID" ]; then
  PIPELINE_ID=$BUILD_NUMBER
fi


if [ "${GITHUB_BRANCH}" == "master" ] && [ "$PULL_REQUEST" == "false" ]; then
  echo '======= Build, deploy and analyze master'

  git fetch origin "${GITHUB_BRANCH}"

  source .cirrus/set_maven_build_version "$BUILD_NUMBER"
  SONAR_VERSION="${PROJECT_VERSION%.*}"

  export MAVEN_OPTS="-Xmx1536m -Xms128m"
  mvn deploy sonar:sonar \
      -Pcoverage,deploy-sonarsource,release,sign \
      -Dmaven.test.redirectTestOutputToFile=false \
      -Dsonar.host.url="$SONAR_HOST_URL" \
      -Dsonar.token="$SONAR_TOKEN" \
      -Dsonar.projectVersion="$SONAR_VERSION" \
      -Dsonar.analysis.buildNumber="$BUILD_NUMBER" \
      -Dsonar.analysis.pipeline="$PIPELINE_ID" \
      -Dsonar.analysis.sha1="$GIT_SHA1"  \
      -Dsonar.analysis.repository="$GITHUB_REPO" \
      -B -e -V "$@"

elif [[ "${GITHUB_BRANCH}" == "branch-"* ]] && [ "$PULL_REQUEST" == "false" ]; then
  echo '======= Build, deploy and analyze maintenance branch'

  git fetch origin "${GITHUB_BRANCH}"

  source .cirrus/set_maven_build_version "$BUILD_NUMBER"
  SONAR_VERSION="${PROJECT_VERSION%.*}"

  export MAVEN_OPTS="-Xmx1536m -Xms128m"
  mvn deploy sonar:sonar \
      -Pcoverage,deploy-sonarsource,release,sign \
      -Dmaven.test.redirectTestOutputToFile=false \
      -Dsonar.host.url="$SONAR_HOST_URL" \
      -Dsonar.token="$SONAR_TOKEN" \
      -Dsonar.projectVersion="$SONAR_VERSION" \
      -Dsonar.branch.name="$GITHUB_BRANCH" \
      -Dsonar.analysis.buildNumber="$BUILD_NUMBER" \
      -Dsonar.analysis.pipeline="$PIPELINE_ID" \
      -Dsonar.analysis.sha1="$GIT_SHA1"  \
      -Dsonar.analysis.repository="$GITHUB_REPO" \
      -B -e -V "$@"

elif [ "$PULL_REQUEST" != "false" ]; then
  echo '======= Build and analyze pull request'

  # Do not deploy a SNAPSHOT version but the release version related to this build and PR
  source .cirrus/set_maven_build_version "$BUILD_NUMBER"

  export MAVEN_OPTS="-Xmx1G -Xms128m"
  if [ "${DEPLOY_PULL_REQUEST:-}" == "true" ]; then
    echo '======= with deploy'
    mvn deploy sonar:sonar \
      -Pcoverage,deploy-sonarsource \
      -Dmaven.test.redirectTestOutputToFile=false \
      -Dsonar.host.url="$SONAR_HOST_URL" \
      -Dsonar.token="$SONAR_TOKEN" \
      -Dsonar.analysis.buildNumber="$BUILD_NUMBER" \
      -Dsonar.analysis.pipeline="$PIPELINE_ID" \
      -Dsonar.analysis.sha1="$GIT_SHA1"  \
      -Dsonar.analysis.repository="$GITHUB_REPO" \
      -Dsonar.analysis.prNumber="$PULL_REQUEST" \
      -Dsonar.pullrequest.branch="$GITHUB_BRANCH" \
      -Dsonar.pullrequest.base="$GITHUB_BASE_BRANCH" \
      -Dsonar.pullrequest.key="$PULL_REQUEST" \
      -B -e -V "$@"
  else
    echo '======= no deploy'
    mvn verify sonar:sonar \
      -Pcoverage \
      -Dmaven.test.redirectTestOutputToFile=false \
      -Dsonar.host.url="$SONAR_HOST_URL" \
      -Dsonar.token="$SONAR_TOKEN" \
      -Dsonar.analysis.buildNumber="$BUILD_NUMBER" \
      -Dsonar.analysis.pipeline="$PIPELINE_ID" \
      -Dsonar.analysis.sha1="$GIT_SHA1"  \
      -Dsonar.analysis.repository="$GITHUB_REPO" \
      -Dsonar.analysis.prNumber="$PULL_REQUEST" \
      -Dsonar.pullrequest.branch="$GITHUB_BRANCH" \
      -Dsonar.pullrequest.base="$GITHUB_BASE_BRANCH" \
      -Dsonar.pullrequest.key="$PULL_REQUEST" \
      -B -e -V "$@"
  fi

else
  echo '======= Build, no analysis, no deploy'

  mvn verify \
      -Dmaven.test.redirectTestOutputToFile=false \
      -B -e -V "$@"
fi
